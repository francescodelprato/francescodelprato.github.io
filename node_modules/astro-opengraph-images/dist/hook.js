import { Resvg } from "@resvg/resvg-js";
import satori from "satori";
import * as fs from "fs/promises";
import { extract, sanitizeHtml } from "./extract.js";
import { getFilePath } from "./util.js";
import { fileURLToPath } from "url";
import * as path from "path";
import * as jsdom from "jsdom";
export async function buildDoneHook({ logger, pages, options, dir, render, }) {
    logger.info("Generating Open Graph images");
    for (const page of pages) {
        try {
            await handlePage({ page, options, render, dir, logger });
        }
        catch (e) {
            logger.error(e);
        }
    }
}
async function handlePage({ page, options, render, dir, logger }) {
    const htmlFile = getFilePath({ dir: fileURLToPath(dir), page: page.pathname });
    const html = (await fs.readFile(htmlFile)).toString();
    const document = new jsdom.JSDOM(sanitizeHtml(html)).window.document;
    const pageDetails = extract(document);
    const reactNode = await render({ ...page, ...pageDetails, dir, document });
    const svg = await satori(reactNode, options);
    const resvg = new Resvg(svg, {
        font: {
            loadSystemFonts: false,
        },
        fitTo: {
            mode: "width",
            value: options.width,
        },
    });
    let pngFile = htmlFile.replace(/\.html$/, ".png");
    // remove leading dist/ from the path
    await fs.writeFile(pngFile, resvg.render().asPng());
    pngFile = pngFile.replace(fileURLToPath(dir), "").replace(/\\/g, "/");
    if (pngFile.startsWith("/"))
        pngFile = pngFile.slice(1);
    // convert the image path to a URL
    let imageUrl = new URL(pageDetails.image).pathname;
    // remove leading slash
    imageUrl = imageUrl.slice(1);
    // check that the og:image property matches the sitePath
    if (imageUrl !== pngFile) {
        throw new Error(`The og:image property in ${htmlFile} (${imageUrl}) does not match the generated image (${pngFile}).`);
    }
    if (options.verbose) {
        logger.info(`Generated ${pngFile} for ${htmlFile}.`);
    }
}
//# sourceMappingURL=hook.js.map